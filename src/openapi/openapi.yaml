openapi: 3.0.0
info:
  title: Chess Cloud API
  description: API for our React-Nave mobile app
  version: 1.0.0
servers:
- url: /
paths:
  /login:
    post:
      summary: Login to the system
      description: "Logs a user into the system, providing a session token."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestBody'
        required: true
      responses:
        "200":
          description: Login successful
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        "400":
          description: Bad Request
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponseModel'
        "401":
          description: Unauthorized
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponseModel'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:login/invocations"
        default:
          statusCode: "200"
          responseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: '''*'''
          responseTemplates:
            application/json: {}
    options:
      tags:
      - CORS
      summary: CORS support
      description: Enable CORS by returning correct headers
      responses:
        "200":
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
              responseTemplates:
                application/json: {}
  /logout:
    post:
      summary: Logout
      description: Logout of the app
      parameters:
      - name: Authorization
        in: header
        description: session token
        required: true
        schema:
          type: string
      - name: userId
        in: header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponseModel'
        "400":
          description: Bad Request
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponseModel'
        "500":
          description: Internal Server Error
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponseModel'
      security:
      - bearerAuth: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:logout/invocations"
    options:
      tags:
      - CORS
      summary: CORS support
      description: Enable CORS by returning correct headers
      responses:
        "200":
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
              responseTemplates:
                application/json: {}
  /register:
    post:
      summary: Register to the system
      description: "Registers a user into the system, providing a session token."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequestBody'
        required: true
      responses:
        "200":
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponseModel'
        "400":
          description: Bad Request
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponseModel'
        "409":
          description: Conflict
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponseModel'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:register/invocations"
        default:
          statusCode: "200"
          responseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: '''*'''
          responseTemplates:
            application/json: {}
    options:
      tags:
      - CORS
      summary: CORS support
      description: Enable CORS by returning correct headers
      responses:
        "200":
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
              responseTemplates:
                application/json: {}
  /stats/{username}:
    get:
      summary: stats
      description: post win/loss/draw/rating
      parameters:
      - name: Authorization
        in: header
        description: session token
        required: true
        schema:
          type: string
      - name: userId
        in: header
        required: true
        schema:
          type: string
      - name: timeControl
        in: query
        description: Specific game mode to retrieve stats for (optional)
        required: false
        schema:
          type: string
      - name: username
        in: path
        description: username
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Post Stats Successful
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameModeStats'
        "400":
          description: Bad Request
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponseModel'
        "500":
          description: Internal Server Error
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponseModel'
      security:
      - bearerAuth: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:stats/invocations"
    options:
      tags:
      - CORS
      summary: CORS support
      description: Enable CORS by returning correct headers
      responses:
        "200":
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
              responseTemplates:
                application/json: {}
  /gameState:
    get:
      summary: Game State
      description: Get Game State
      parameters:
      - name: Authorization
        in: header
        description: session token
        required: true
        schema:
          type: string
      - name: userId
        in: header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Game State Successfully found
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameState'
        "400":
          description: Bad Request
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponseModel'
        "404":
          description: Not Found
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponseModel'
      security:
      - bearerAuth: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:gameState/invocations"
    options:
      tags:
      - CORS
      summary: CORS support
      description: Enable CORS by returning correct headers
      responses:
        "200":
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
              responseTemplates:
                application/json: {}
  /game/{gameId}:
    get:
      summary: Game State
      description: Get Game State
      parameters:
      - name: Authorization
        in: header
        description: session token
        required: true
        schema:
          type: string
      - name: userId
        in: header
        required: true
        schema:
          type: string
      - name: gameId
        in: path
        description: Archived Game id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Archived Game Successfully found
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArchivedGameResponse'
        "400":
          description: Bad Request
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponseModel'
      security:
      - bearerAuth: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:archivedGame/invocations"
    options:
      tags:
      - CORS
      summary: CORS support
      description: Enable CORS by returning correct headers
      responses:
        "200":
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
              responseTemplates:
                application/json: {}
  /games/{username}:
    get:
      summary: list archived games
      description: array of archivedGame objects without the moveList field
      parameters:
      - name: Authorization
        in: header
        description: session token
        required: true
        schema:
          type: string
      - name: userId
        in: header
        required: true
        schema:
          type: string
      - name: timeControl
        in: query
        description: Specific game mode to retrieve games for (optional)
        required: false
        schema:
          type: string
          enum:
          - BLITZ_5
          - BLITZ_10
          - BULLET_3
          - BULLET_1
      - name: username
        in: path
        description: username
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Get archived games Successful
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listArchivedGamesResponse'
        "400":
          description: Bad Request
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponseModel'
      security:
      - bearerAuth: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:archivedGames/invocations"
    options:
      tags:
      - CORS
      summary: CORS support
      description: Enable CORS by returning correct headers
      responses:
        "200":
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
              responseTemplates:
                application/json: {}
components:
  schemas:
    LoginRequestBody:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
          description: The user's email address
          format: email
        password:
          type: string
          description: The user's password
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: 9dd1561d-e3ea-419b-a394-5ca2fbad058b
        user:
          $ref: '#/components/schemas/User'
    GeneralResponseModel:
      type: object
      properties:
        message:
          type: string
          example: Message
    RegisterRequestBody:
      required:
      - email
      - password
      - username
      type: object
      properties:
        email:
          type: string
          description: The user's email address
          format: email
        username:
          type: string
          description: User's username(non-unique)
        password:
          type: string
          description: The user's password
    GameModeStats:
      type: object
      properties: {}
      description: Stats for one or all tracked game modes
    GameState:
      required:
      - gameStateAsFen
      - gameStatus
      - id
      - moveList
      - players
      - rating
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the game.
        moveList:
          type: array
          description: List of moves made in the game.
          items:
            type: string
        gameStatus:
          $ref: '#/components/schemas/GameStatus'
        players:
          type: array
          description: List of players participating in the game.
          items:
            $ref: '#/components/schemas/Player'
        rating:
          type: integer
          description: Rating of the game.
        gameStateAsFen:
          type: string
          description: The current game state in FEN notation.
    GameStatus:
      type: string
      description: Current status of the game.
      enum:
      - PENDING
      - ONGOING
      - FINISHED
    Player:
      required:
      - id
      - name
      - rating
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the player.
        name:
          type: string
          description: Name of the player.
        rating:
          type: integer
          description: Player's rating in the game.
    ArchivedGameResponse:
      type: object
      properties:
        resultReason:
          $ref: '#/components/schemas/ResultReason'
        timeControl:
          $ref: '#/components/schemas/TimeControl'
        created:
          type: string
          description: Date when the game was created.
          format: date-time
          example: 2023-08-15T13:15:30Z
        moveList:
          type: array
          items:
            $ref: '#/components/schemas/Move'
        players:
          type: array
          items:
            $ref: '#/components/schemas/ArchivedPlayer'
        rating:
          type: integer
          description: Rating of the game.
          example: 1000
        numMoves:
          type: integer
          description: Length of the moveList.
          example: 23
    listArchivedGamesResponse:
      type: array
      items:
        $ref: '#/components/schemas/ArchivedGameCardResponse'
    User:
      type: object
      properties:
        id:
          type: string
          example: foo-id
        email:
          type: string
          example: fake@gmail.com
        username:
          type: string
          example: foo-username
    ResultReason:
      type: string
      description: The reason for the result of the game.
      example: CHECKMATE
      enum:
      - ABORTED
      - FORFEIT
      - TIMEOUT
      - CHECKMATE
      - REPETITION
      - INSUFFICIENT_MATERIAL
    TimeControl:
      type: string
      description: Enumeration representing different time controls for a game.
      enum:
      - BLITZ_5
      - BLITZ_10
      - BULLET_3
      - BULLET_1
    Move:
      type: object
      properties:
        notation:
          type: string
          description: The move in standard algebraic notation.
          example: e4
        timestamp:
          type: string
          description: The timestamp when the move was made.
          format: date-time
          example: 2024-10-07T10:20:30Z
        fen:
          type: string
          description: boardstate fen
          example: rnbqkbnr/pppppppp/8/8/PPPPPPPP/RNBQKBNR b KQkq-1
    ArchivedPlayer:
      type: object
      properties:
        username:
          type: string
          description: The username of the player.
          example: test-username
        isWhite:
          type: boolean
          description: Indicates if the player is playing as white.
          example: true
        remainingTime:
          type: integer
          description: The remaining time for the player in seconds.
          example: 300
        connectionId:
          type: string
          description: The connection ID for the player's WebSocket.
          example: fake-connection-id
        playerId:
          type: string
          description: Unique identifier for the player.
          example: test-Id
    ArchivedGameCardResponse:
      type: object
      properties:
        resultReason:
          $ref: '#/components/schemas/ResultReason'
        timeControl:
          $ref: '#/components/schemas/TimeControl'
        created:
          type: string
          description: Date when the game was created.
          format: date-time
          example: 2023-08-15T13:15:30Z
        players:
          type: array
          items:
            $ref: '#/components/schemas/ArchivedPlayer'
        numMoves:
          type: integer
          description: Length of the moveList.
          example: 23
  responses:
    "400":
      description: Bad Request
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralResponseModel'
    "401":
      description: Unauthorized
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralResponseModel'
    "200":
      description: OK
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralResponseModel'
    "500":
      description: Internal Server Error
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralResponseModel'
    "409":
      description: Conflict
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralResponseModel'
    "404":
      description: Not Found
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralResponseModel'
  parameters:
    authHeader:
      name: Authorization
      in: header
      description: session token
      required: true
      schema:
        type: string
    userId:
      name: userId
      in: header
      required: true
      schema:
        type: string
  securitySchemes:
    bearerAuth:
      type: apiKey
      name: Unused
      in: header
      scheme: bearer
      bearerFormat: Session Token
      x-amazon-apigateway-authtype: custom
      x-amazon-apigateway-authorizer:
        type: REQUEST
        authorizerUri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:auth/invocations"
        identityValidationExpression: "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$"
        authorizerResultTtlInSeconds: 300
        identitySource: "method.request.header.Authorization,method.request.header.userId"
x-amazon-apigateway-gateway-responses:
  DEFAULT_4XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
      gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
    responseTemplates:
      application/json: "{}"
  DEFAULT_5XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
      gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
    responseTemplates:
      application/json: "{}"
