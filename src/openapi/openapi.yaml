openapi: 3.0.0
info:
  title: Chess Cloud API
  description: API for our React-Nave mobile app
  version: 1.0.0
servers:
- url: /
paths:
  /login:
    post:
      summary: Login to the system
      description: "Logs a user into the system, providing a session token."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestBody'
        required: true
      responses:
        "200":
          description: Login successful
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        "400":
          description: Bad Request
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        "401":
          description: Unauthorized
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:login/invocations"
        default:
          statusCode: "200"
          responseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: '''*'''
          responseTemplates:
            application/json: {}
    options:
      tags:
      - CORS
      summary: CORS support
      description: Enable CORS by returning correct headers
      responses:
        "200":
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
              responseTemplates:
                application/json: {}
  /logout:
    post:
      summary: Logout
      description: Logout of the app
      parameters:
      - name: Authorization
        in: header
        description: session token
        required: true
        schema:
          type: string
      - name: userId
        in: header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Logout Successful
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OKResponse'
        "400":
          description: Bad Request
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      security:
      - bearerAuth: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:logout/invocations"
    options:
      tags:
      - CORS
      summary: CORS support
      description: Enable CORS by returning correct headers
      responses:
        "200":
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
              responseTemplates:
                application/json: {}
  /register:
    post:
      summary: Register to the system
      description: "Registers a user into the system, providing a session token."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequestBody'
        required: true
      responses:
        "200":
          description: Registration successful
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OKResponse'
        "400":
          description: Bad Request
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        "409":
          description: Conflict
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:register/invocations"
        default:
          statusCode: "200"
          responseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: '''*'''
          responseTemplates:
            application/json: {}
    options:
      tags:
      - CORS
      summary: CORS support
      description: Enable CORS by returning correct headers
      responses:
        "200":
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
              responseTemplates:
                application/json: {}
  /stats:
    post:
      summary: stats
      description: get win/loss/draw
      parameters:
      - name: Authorization
        in: header
        description: session token
        required: true
        schema:
          type: string
      - name: userId
        in: header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Post Stats Successful
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatsResponse'
      security:
      - bearerAuth: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:stats/invocations"
    options:
      tags:
      - CORS
      summary: CORS support
      description: Enable CORS by returning correct headers
      responses:
        "200":
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
              responseTemplates:
                application/json: {}
components:
  schemas:
    LoginRequestBody:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
          description: The user's email address
          format: email
        password:
          type: string
          description: The user's password
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: 9dd1561d-e3ea-419b-a394-5ca2fbad058b
        user:
          $ref: '#/components/schemas/User'
    BadRequest:
      type: object
      properties:
        message:
          type: string
          example: Bad Request
    Unauthorized:
      type: object
      properties:
        message:
          type: string
          example: Unauthorized
    OKResponse:
      type: object
      properties:
        message:
          type: string
          example: OK
    RegisterRequestBody:
      required:
      - email
      - password
      - username
      type: object
      properties:
        email:
          type: string
          description: The user's email address
          format: email
        username:
          type: string
          description: User's username(non-unique)
        password:
          type: string
          description: The user's password
    Conflict:
      type: object
      properties:
        message:
          type: string
          example: Conflict
    StatsResponse:
      type: object
      properties:
        gamesWon:
          type: integer
          example: 0
        gamesLost:
          type: integer
          example: 8
        gamesDrawn:
          type: integer
          example: 0
    User:
      type: object
      properties:
        id:
          type: string
          example: foo-id
        email:
          type: string
          example: fake@gmail.com
        username:
          type: string
          example: foo-username
  parameters:
    authHeader:
      name: Authorization
      in: header
      description: session token
      required: true
      schema:
        type: string
    userId:
      name: userId
      in: header
      required: true
      schema:
        type: string
  securitySchemes:
    bearerAuth:
      type: apiKey
      name: Unused
      in: header
      scheme: bearer
      bearerFormat: Session Token
      x-amazon-apigateway-authtype: custom
      x-amazon-apigateway-authorizer:
        type: REQUEST
        authorizerUri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:auth/invocations"
        identityValidationExpression: "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$"
        authorizerResultTtlInSeconds: 300
        identitySource: "method.request.header.Authorization,method.request.header.userId"
