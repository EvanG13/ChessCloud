openapi: 3.0.0
info:
  title: Chess Cloud API
  description: API for our React-Nave mobile app
  version: 1.0.0
servers:
- url: /
paths:
  /login:
    post:
      summary: Login to the system
      description: Logs a user into the system, providing a session token.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestBody'
        required: true
      responses:
        200:
          description: Login successful
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:login/invocations
        default:
          statusCode: "200"
          responseParameters:
            method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
            method.response.header.Access-Control-Allow-Methods: '''*'''
            method.response.header.Access-Control-Allow-Origin: '''*'''
          responseTemplates:
            application/json: {}
    options:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestBody'
        required: true
      responses:
        200:
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        default:
          statusCode: "200"
          responseParameters:
            method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
            method.response.header.Access-Control-Allow-Methods: '''*'''
            method.response.header.Access-Control-Allow-Origin: '''*'''
          responseTemplates:
            application/json: {}
  /logout:
    post:
      summary: Logout
      description: Logout of the app
      responses:
        200:
          description: Logout Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OKResponse'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:logout/invocations
  /register:
    post:
      summary: Register to the system
      description: Registers a user into the system, providing a session token.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequestBody'
        required: true
      responses:
        200:
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OKResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:register/invocations
components:
  schemas:
    LoginRequestBody:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
          description: The user's email address
          format: email
        password:
          type: string
          description: The user's password
    LoginResponse:
      type: object
      properties:
        jwt:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        user:
          type: string
          example: '{id=foo-id, email=fake@gamil.com, username=foo-username}'
    BadRequest:
      type: object
      properties:
        message:
          type: string
          example: Bad Request
    Unauthorized:
      type: object
      properties:
        message:
          type: string
          example: Unauthorized
    OKResponse:
      type: object
      properties:
        message:
          type: string
          example: OK
    RegisterRequestBody:
      required:
      - email
      - password
      - username
      type: object
      properties:
        email:
          type: string
          description: The user's email address
          format: email
        username:
          type: string
          description: User's username(non-unique)
        password:
          type: string
          description: The user's password
    Conflict:
      type: object
      properties:
        message:
          type: string
          example: Conflict
